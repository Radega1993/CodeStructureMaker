Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 codestructuremaker (1.0-1) unstable; urgency=medium
 .
   * First version (Closes: #0)
Author: raul <rauldearriba@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2020-05-27

--- codestructuremaker-1.0.orig/csm.desktop
+++ codestructuremaker-1.0/csm.desktop
@@ -1,7 +1,9 @@
 [Desktop Entry]
 Version=1.0
 Type=Application
-Terminal=false
-Exec=/usr/share/applications/app.py
+Terminal=true
+Exec=/usr/share/applications/csm.py
+TryExec=/usr/share/applications/csm.py
 Name=codestructuremaker
 Comment=Is a command line application to create folders structure
+Icon=/usr/share/codestructuremaker/logo.png
\ No newline at end of file
--- /dev/null
+++ codestructuremaker-1.0/csm.py
@@ -0,0 +1,75 @@
+#!/usr/bin/python
+
+# Include standard modules
+import argparse
+import sys
+import logging
+
+
+def codestructuremaker_main():
+    # loggin system
+    logging.basicConfig(filename='log', level=logging.DEBUG)
+
+    # Initiate the parser
+    parser = argparse.ArgumentParser(description="Create default code project structure automaticaly")
+    valid_licenses = [None, "mit"]
+    valid_languages = ["python", "webproject", "cpp", "c", "nodejs"]
+
+
+    # Add long and short argument
+    parser.add_argument("--language", "-l", choices=valid_languages, help="Set the language of the project")
+    parser.add_argument("--name", "-n", help="Set the name of the project")
+    parser.add_argument("--license", "-li", default=None, choices=valid_licenses, help="Set the license of the project")
+    #parser.add_argument("--path", "-p", help="Set the path of the project")
+
+    # Read arguments from the command line
+    args = parser.parse_args()
+
+    if len(sys.argv) == 1:
+        from pyfiglet import Figlet
+        f = Figlet(font='slant')
+        print(f.renderText('CSM'))
+        print("Language list")
+        for language in valid_languages:
+            print("- "+ language)
+        while True:
+            args.language = input("Please chose language: ")
+            if args.language not in valid_languages:
+                print("Not supported language")
+            else:
+                break
+        args.name = input("Please chose projectName: ")
+
+
+        args.license = input("Please chose license: (defaul: None) ")
+        if args.license not in valid_licenses:
+            print("Not supported license, we use default")
+            args.license = None
+        if args.license == "":
+            print("Not supported license, we use default")
+            args.license = None
+
+    # Check args
+    if (args.language and args.name):
+        if args.language == "python":
+            from languages.python import Python
+            Python(args.name, args.license)
+        if args.language == "webproject":
+            from languages.webproject import WebProject
+            WebProject(args.name, args.license)
+        if args.language == "cpp":
+            from languages.cpp import CPP
+            CPP(args.name, args.license)
+        if args.language == "c":
+            from languages.c import C
+            C(args.name, args.license)
+        if args.language == "nodejs":
+            from languages.nodejs import Nodejs
+            Nodejs(args.name, args.license)
+    else:
+        print("Language and project name are compulsary")
+
+    return 0
+
+if __name__ == '__main__':
+    codestructuremaker_main()
